# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build and Test Galaxy

on:
  # push:
  #   branches: [ "main" ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5.2.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup environment
      env:
        GITHUB_PATH: ${{ github.path }}
        VENV_PATH: "$GITHUB_PATH/.venv"
        # POETRY_HOME: "$GITHUB_PATH/.cache/.poetry"
        POETRY_HOME: "$GITHUB_PATH/.poetry"
        BIN_PATH: "$GITHUB_PATH/.bin"
      run: |
        mkdir -p ${VENV_PATH} ${POETRY_HOME} ${BIN_PATH}
        export PATH="${VENV_PATH}/bin:${POETRY_HOME}/bin:${BIN_PATH}:$PATH"
        export PYTHONUNBUFFERED=1
        export PYTHONDONTWRITEBYTECODE=1
        export POETRY_VIRTUALENVS_IN_PROJECT=true
        export POETRY_VIRTUALENVS_CREATE=true
        sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential curl git
        cp /usr/bin/make ${BIN_PATH}
    - name: Install dependencies
      run: |
        make install
    - name: Run linter
      run: |
        make lint
    - name: Run tests
      run: |
        make test
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Docker Login
      uses: docker/login-action@v3.3.0
      with:
        # Username used to log against the Docker registry
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        # Password or personal access token used to log against the Docker registry
        password: ${{ secrets.DOCKER_HUB_SECRET }}
    - name: describe tags
      id: describe_tags
      run: |
        echo "IMAGE_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")-build.${GITHUB_RUN_ID}-${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        file: deploy/docker/Dockerfile
        # push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: devrelyio/galaxy:${{ steps.describe_tags.outputs.IMAGE_TAG }}
        platforms: linux/amd64,linux/arm64


