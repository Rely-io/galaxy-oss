# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build and Test Galaxy

on:
  # push:
  #   branches: [ "main" ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5.2.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup environment
      env:
        GITHUB_PATH: ${{ github.path }}
        VENV_PATH: "$GITHUB_PATH/.venv"
        # POETRY_HOME: "$GITHUB_PATH/.cache/.poetry"
        POETRY_HOME: "$GITHUB_PATH/.poetry"
        BIN_PATH: "$GITHUB_PATH/.bin"
      run: |
        mkdir -p ${VENV_PATH} ${POETRY_HOME} ${BIN_PATH}
        export PATH="${VENV_PATH}/bin:${POETRY_HOME}/bin:${BIN_PATH}:$PATH"
        export PYTHONUNBUFFERED=1
        export PYTHONDONTWRITEBYTECODE=1
        export POETRY_VIRTUALENVS_IN_PROJECT=true
        export POETRY_VIRTUALENVS_CREATE=true
        sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential curl git
        cp /usr/bin/make ${BIN_PATH}
    - name: Install dependencies
      run: |
        make install
    - name: Run linter
      run: |
        make lint
    - name: Run tests
      run: |
        make test
    - name: Docker Login
      uses: docker/login-action@v3.3.0
      with:
        # Username used to log against the Docker registry
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        # Password or personal access token used to log against the Docker registry
        password: ${{ secrets.DOCKER_HUB_SECRET }}

    # - name: Build and push Docker images
    #   uses: docker/build-push-action@v6.9.0
    #   with:
    #     # List of extra privileged entitlement (e.g., network.host,security.insecure)
    #     allow: # optional
    #     # List of annotation to set to the image
    #     annotations: # optional
    #     # List of attestation parameters (e.g., type=sbom,generator=image)
    #     attests: # optional
    #     # List of build-time variables
    #     build-args: # optional
    #     # List of additional build contexts (e.g., name=path)
    #     build-contexts: # optional
    #     # Builder instance
    #     builder: # optional
    #     # List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)
    #     cache-from: # optional
    #     # List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)
    #     cache-to: # optional
    #     # Optional parent cgroup for the container used in the build
    #     cgroup-parent: # optional
    #     # Build's context is the set of files located in the specified PATH or URL
    #     context: # optional
    #     # Path to the Dockerfile
    #     file: # optional
    #     # List of metadata for an image
    #     labels: # optional
    #     # Load is a shorthand for --output=type=docker
    #     load: # optional, default is false
    #     # Set the networking mode for the RUN instructions during build
    #     network: # optional
    #     # Do not use cache when building the image
    #     no-cache: # optional, default is false
    #     # Do not cache specified stages
    #     no-cache-filters: # optional
    #     # List of output destinations (format: type=local,dest=path)
    #     outputs: # optional
    #     # List of target platforms for build
    #     platforms: # optional
    #     # Generate provenance attestation for the build (shorthand for --attest=type=provenance)
    #     provenance: # optional
    #     # Always attempt to pull all referenced images
    #     pull: # optional, default is false
    #     # Push is a shorthand for --output=type=registry
    #     push: # optional, default is false
    #     # Generate SBOM attestation for the build (shorthand for --attest=type=sbom)
    #     sbom: # optional
    #     # List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
    #     secrets: # optional
    #     # List of secret env vars to expose to the build (e.g., key=envname, MY_SECRET=MY_ENV_VAR)
    #     secret-envs: # optional
    #     # List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)
    #     secret-files: # optional
    #     # Size of /dev/shm (e.g., 2g)
    #     shm-size: # optional
    #     # List of SSH agent socket or keys to expose to the build
    #     ssh: # optional
    #     # List of tags
    #     tags: # optional
    #     # Sets the target stage to build
    #     target: # optional
    #     # Ulimit options (e.g., nofile=1024:1024)
    #     ulimit: # optional
    #     # GitHub Token used to authenticate against a repository for Git context
    #     github-token: # optional, default is ${{ github.token }}
    #     # List of additional build arguments


