variables:
  PYTHON_VERSION: "3.11"
  DOCKER_VERSION: "24.0.5"
  HELM_VERSION: "3.15.3"

  VENV_PATH: "${CI_PROJECT_DIR}/.venv"
  POETRY_HOME: "${CI_PROJECT_DIR}/.cache/.poetry"
  BIN_PATH: "${CI_PROJECT_DIR}/.cache/.bin"

  IMAGE_PLATFORMS: "linux/arm64/v8,linux/amd64"

  HELM_CHART_REGISTRY_DOMAIN: "registry-1.docker.io"
  HELM_CHART_REGISTRY: "oci://${HELM_CHART_REGISTRY_DOMAIN}/devrelyio"
  HELM_CHART_PATH: ./deploy/helm/galaxy

cache:
  paths:
    - ${VENV_PATH}
    - ${POETRY_HOME}
    - ${BIN_PATH}
  key:
    files:
      - poetry.lock
      - .gitlab-ci.yml
    prefix: "${CI_COMMIT_REF_SLUG}-${CI_DEFAULT_BRANCH}"

workflow:
  rules:
    # Merge request
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Tag (release)
    - if: "$CI_COMMIT_TAG"
    # Default and protected branches
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_REF_PROTECTED == "true"

stages:
  - Install
  - Static Analysis
  - Test
  - Build
  - Release

default:
  interruptible: true
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - export PATH="${VENV_PATH}/bin:${POETRY_HOME}/bin:${BIN_PATH}:$PATH"

install:
  stage: Install
  script:
    # Create all paths needed
    - mkdir -p ${VENV_PATH} ${POETRY_HOME} ${BIN_PATH}
    # Configure environment
    - export PYTHONUNBUFFERED=1
    - export PYTHONDONTWRITEBYTECODE=1
    - export POETRY_VIRTUALENVS_IN_PROJECT=true
    # Update and install dependencies
    - apt-get update && apt-get install --no-install-recommends -y build-essential curl git
    # Add make to cached bin directory
    - cp /usr/bin/make ${BIN_PATH}
    # Install
    - make install

lint:
  stage: Static Analysis
  needs:
    - install
  script:
    - make lint

test:
  stage: Test
  needs:
    - install
  script:
    - make test

build-image:
  stage: Build
  image: docker:${DOCKER_VERSION}
  services:
    - docker:${DOCKER_VERSION}-dind
  needs:
    - lint
    - test
  rules:
    - if: "$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH"
  script:
    - apk add --no-cache git
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - export IMAGE_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")-build.${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    - echo "Building Docker image with tag ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
    - docker buildx create --name builder --driver docker-container --bootstrap
    - docker buildx use builder
    - |
      docker buildx build --push -f deploy/docker/Dockerfile \
        -t ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} \
        --platform ${IMAGE_PLATFORMS} .
    - echo "Docker image with tag ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} pushed to registry"

build-image-release:
  stage: Build
  image: docker:${DOCKER_VERSION}
  services:
    - docker:${DOCKER_VERSION}-dind
  needs:
    - lint
    - test
  rules:
    - if: "$CI_COMMIT_TAG"
  allow_failure: true
  script:
    - apk add --no-cache git
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - export IMAGE_TAG="${CI_COMMIT_TAG}"
    - echo "Building Docker image with tag ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
    - docker buildx create --name builder --driver docker-container --bootstrap
    - docker buildx use builder
    - |
      docker buildx build --push -f deploy/docker/Dockerfile \
        -t ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} \
        -t ${CI_REGISTRY_IMAGE}:latest \
        --platform ${IMAGE_PLATFORMS} .
    - echo "Docker image with tag ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} pushed to registry"

release-helm-chart:
  stage: Release
  image:
    name: alpine/helm:${HELM_VERSION}
    entrypoint: [""]
  needs:
    - build-image-release
  rules:
    - if: "$CI_COMMIT_TAG"
  script:
    - echo "Packaging Helm chart with tag ${CI_COMMIT_TAG}"
    - sed -i "s+repository.*+repository:\ ${CI_REGISTRY_IMAGE}+g" ${HELM_CHART_PATH}/values.yaml
    - sed -i "s+tag.*+tag:\ ${CI_COMMIT_TAG}+g" ${HELM_CHART_PATH}/values.yaml
    - helm package ${HELM_CHART_PATH} -d . --version ${CI_COMMIT_TAG}
    - HELM_PACKAGE_NAME=$(ls *.tgz)
    - mkdir -p ./public
    - helm package ${HELM_CHART_PATH} --destination ./public --version ${CI_COMMIT_TAG}
    - echo ${CI_REGISTRY_PASSWORD} | helm registry login "${HELM_CHART_REGISTRY_DOMAIN}" -u ${CI_REGISTRY_USER} --password-stdin
    - helm push ${HELM_PACKAGE_NAME} ${HELM_CHART_REGISTRY}
    - echo "Helm chart with tag ${CI_COMMIT_TAG} pushed to registry"
